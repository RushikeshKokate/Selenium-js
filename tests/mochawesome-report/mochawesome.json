{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-20T08:01:00.252Z",
    "end": "2024-03-20T08:01:06.450Z",
    "duration": 6198,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "639e21ee-e640-4b3f-8641-b9b53ed07759",
      "title": "",
      "fullFile": "E:\\Testing\\selenium-js\\tests\\testStocks.spec.js",
      "file": "\\testStocks.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "887c2328-b6ef-4cc8-af50-d4e6d717a705",
          "title": "Selenium Tests",
          "fullFile": "E:\\Testing\\selenium-js\\tests\\testStocks.spec.js",
          "file": "\\testStocks.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should perform a simple web interaction",
              "fullTitle": "Selenium Tests should perform a simple web interaction",
              "timedOut": false,
              "duration": 6192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up Chrome options\nlet options = new chrome.Options();\n// Add any desired Chrome options here\n// For example, headless mode\noptions.addArguments('--headless');\n// Create a WebDriver instance with Chrome\nlet driver = await new Builder()\n    .forBrowser('chrome')\n    .build();\n// Set a larger timeout for this test case\nthis.timeout(20000); // 10 seconds\n// Return the promise returned by the async test function\nreturn new Promise(async (resolve, reject) => {\n  try {\n      // Navigate to a web page\n      await driver.get('https://portal.tradebrains.in/stock/BAJAJ-AUTO/consolidated');\n      // Find a web element by its CSS selector\n      let element = await driver.wait(until.elementLocated(By.css('.fs-30-20.fw-500.mb-0')), 5000);\n      let findNa = await driver.findElements(By.xpath(\"//*[contains(text(), 'NA')]\"))\n      console.log('List of NA are as follows: ⬇️',findNa)\n      for (let element of findNa) {\n        console.log(\"List item text: \" + await element.getText());\n      }\n      // Assert the text of the element\n      \n        let text = await element.getText();\n        assert.equal(text, 'Bajaj Auto');\n   \n      // Perform some interaction with the element (e.g., click)\n      // await element.click();\n      // Wait for a specific condition (e.g., element to be visible)\n      // await driver.wait(until.elementIsVisible(element), 5000);\n      // Resolve the promise if all assertions and actions succeed\n      resolve();\n  } catch (error) {\n      // Reject the promise if any error occurs\n      reject(error);\n  } finally {\n      // Close the WebDriver session\n      await driver.quit();\n  }\n});",
              "err": {},
              "uuid": "bdbb5e59-2153-41db-94f1-730e755055b9",
              "parentUUID": "887c2328-b6ef-4cc8-af50-d4e6d717a705",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdbb5e59-2153-41db-94f1-730e755055b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}